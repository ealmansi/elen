!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).elen=f()}}(function(){return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){"use strict";function shiftLeft(n,bits){return n*Math.pow(2,bits)}function shiftRight(n,bits){return Math.floor(n/Math.pow(2,bits))}module.exports={MAX_EXPONENT:2047,MAX_MANTISSA:0xfffffffffffff,construct:function(_ref){var sign=_ref.sign,exponent=_ref.exponent,mantissa=_ref.mantissa;if(0!==sign&&1!==sign)throw new Error("Invalid value for sign: "+sign+".");if("number"!=typeof exponent||exponent<0||2047<exponent)throw new Error("Invalid value for exponent: "+exponent+".");if("number"!=typeof mantissa||mantissa<0||0xfffffffffffff<mantissa)throw new Error("Invalid value for mantissa: "+mantissa+".");var buffer=new ArrayBuffer(8),floatArray=new Float64Array(buffer),intArray=new Uint8Array(buffer);return function(sign,intArray){intArray[7]|=shiftLeft(sign,7)}(sign,intArray),function(exponent,intArray){intArray[7]|=shiftRight(exponent,4),intArray[6]|=shiftLeft(15&exponent,4)}(exponent,intArray),function(mantissa,intArray){intArray[6]|=255&shiftRight(mantissa,48),intArray[5]|=255&shiftRight(mantissa,40),intArray[4]|=255&shiftRight(mantissa,32),intArray[3]|=255&shiftRight(mantissa,24),intArray[2]|=255&shiftRight(mantissa,16),intArray[1]|=255&shiftRight(mantissa,8),intArray[0]|=255&mantissa}(mantissa,intArray),floatArray[0]},deconstruct:function(n){if("number"!=typeof n)throw new Error("Value is not of type number: "+n+".");var buffer=new ArrayBuffer(8),floatArray=new Float64Array(buffer),intArray=new Uint8Array(buffer);return floatArray[0]=n,{sign:function(intArray){return shiftRight(intArray[7],7)}(intArray),exponent:function(intArray){var r=0;return r+=shiftLeft(127&intArray[7],4),r+=shiftRight(intArray[6],4)}(intArray),mantissa:function(intArray){var r=0;return r+=shiftLeft(15&intArray[6],48),r+=shiftLeft(intArray[5],40),r+=shiftLeft(intArray[4],32),r+=shiftLeft(intArray[3],24),r+=shiftLeft(intArray[2],16),r+=shiftLeft(intArray[1],8),r+=intArray[0]}(intArray)}}}},{}],2:[function(require,module,exports){"use strict";
/***
 * @license
 * https://github.com/ealmansi/elen
 * Copyright (c) 2017 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */var binary64=require("./binary64"),LENGTH_MARKER=";",SIGN_NON_NEGATIVE=">",SIGN_NEGATIVE="<";function elen(n){var r="";0<n&&(r+=LENGTH_MARKER);var s=n.toString();return 1<s.length&&(r+=elen(s.length)),r+=s}function decodeAssert(condition,input){if(!condition)throw new Error("Input is not a valid ELEN-encoded number: "+input+".")}module.exports={encode:function(n){if("number"!=typeof n)throw new Error("Value is not of type number: "+n+".");var _binary64$deconstruct=binary64.deconstruct(n),sign=_binary64$deconstruct.sign,exponent=_binary64$deconstruct.exponent,mantissa=_binary64$deconstruct.mantissa,r="";return r+=1===sign?SIGN_NEGATIVE:SIGN_NON_NEGATIVE,r+=elen(1===sign?binary64.MAX_EXPONENT-exponent:exponent),r+=elen(1===sign?binary64.MAX_MANTISSA-mantissa:mantissa)},decode:function(s){if("string"!=typeof s)throw new Error("Value is not of type string: "+s+".");var _parseSign=function(s,i){return decodeAssert(i<s.length,s),s[i]===SIGN_NON_NEGATIVE?{signLength:1,sign:0}:s[i]===SIGN_NEGATIVE?{signLength:1,sign:1}:void decodeAssert(!1,s)}(s,0),signLength=_parseSign.signLength,sign=_parseSign.sign,_parseExponent=function(s,sign,i){if(decodeAssert(i<s.length,s),"0"===s[i])return{exponentLength:1,exponent:0===sign?0:binary64.MAX_EXPONENT};for(var j=i,l=0,t=void 0,n=void 0;s[j]===LENGTH_MARKER;)l+=1,j+=1;for(decodeAssert(0!==l,s),n=1;0<l;)t=n,decodeAssert(0<(n=Number.parseInt(s.substr(j,n))),s),j+=t,l-=1;return{exponentLength:j-i,exponent:0===sign?n:binary64.MAX_EXPONENT-n}}(s,sign,signLength),exponentLength=_parseExponent.exponentLength,exponent=_parseExponent.exponent,_parseMantissa=function(s,sign,i){if(decodeAssert(i<s.length,s),"0"===s[i])return{mantissaLength:1,mantissa:0===sign?0:binary64.MAX_MANTISSA};for(var j=i,l=0,t=void 0,n=void 0;s[j]===LENGTH_MARKER;)l+=1,j+=1;for(decodeAssert(0!==l,s),n=1;0<l;)t=n,decodeAssert(0<(n=Number.parseInt(s.substr(j,n))),s),j+=t,l-=1;return{mantissaLength:j-i,mantissa:0===sign?n:binary64.MAX_MANTISSA-n}}(s,sign,signLength+exponentLength),mantissaLength=_parseMantissa.mantissaLength,mantissa=_parseMantissa.mantissa;return decodeAssert(s.length===signLength+exponentLength+mantissaLength,s),binary64.construct({sign:sign,exponent:exponent,mantissa:mantissa})}}},{"./binary64":1}]},{},[2])(2)});
